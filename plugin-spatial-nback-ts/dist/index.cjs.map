{"version":3,"file":"index.cjs","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\n  \"name\": \"plugin-spatial-nback-ts\",\n  \"version\": \"0.0.1\",\n  \"description\": \"spatial grid n-back task\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ahfarhat/JsPsychTemplates/\",\n    \"directory\": \"\"\n  },\n  \"keywords\": [\n    \"jsPsych\"\n  ],\n  \"author\": {\n    \"name\": \"A. Hunter Farhat\",\n    \"url\": \"github.com/ahfarhat\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ahfarhat/JsPsychTemplates//issues\"\n  },\n  \"homepage\": \"/plugin-spatial-nback-ts/README.md\",\n  \"dependencies\": {\n    \"@citation-js/core\": \"^0.7.14\",\n    \"@citation-js/plugin-bibtex\": \"^0.7.14\",\n    \"@citation-js/plugin-cff\": \"^0.6.1\",\n    \"@citation-js/plugin-software-formats\": \"^0.6.1\",\n    \"jspsych\": \"^8.2.1\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.2\",\n    \"@jspsych/test-utils\": \"^1.0.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"plugin-spatial-nback-ts\",\n  version: version,\n  parameters: {\n      /** Number of rows in the spatial grid */\n      rows: {\n        type: ParameterType.INT,\n        default: 3,\n      },\n      /** Number of columns in the spatial grid */\n      cols: {\n        type: ParameterType.INT,\n        default: 3,\n      },\n      /** Size of each cell in pixels */\n      cell_size: {\n        type: ParameterType.INT,\n        default: 100,\n      },\n      /** Row position of the stimulus (0-indexed) */\n      stimulus_row: {\n        type: ParameterType.INT,\n        default: 0,\n      },\n      /** Column position of the stimulus (0-indexed) */\n      stimulus_col: {\n        type: ParameterType.INT,\n        default: 0,\n      },\n      /** Whether this trial is a target trial */\n      is_target: {\n        type: ParameterType.BOOL,\n        default: false,\n      },\n      /** Duration the stimulus is displayed (ms) */\n      stimulus_duration: {\n        type: ParameterType.INT,\n        default: 500,\n      },\n      /** Inter-stimulus interval (ms) */\n      // I recommend using feedback_duration as ISI if you have any type of feedback showing\n      isi_duration: {\n        type: ParameterType.INT,\n        default: 1000,\n      },\n      /** Whether to show feedback after response */\n      show_feedback: {\n        type: ParameterType.BOOL,\n        default: true,\n      },\n      /** Whether to show feedback when there is no response */\n      showFeedbackNoResponse: {\n        type: ParameterType.BOOL,\n        default: true,\n      },\n      /** Whether to show feedback border around the grid */\n      show_feedback_border: {\n        type: ParameterType.BOOL,\n        default: true,\n      },\n      /** Duration of feedback display (ms) */\n      feedback_duration: {\n        type: ParameterType.INT,\n        default: 500,\n      },\n      /** Whether to wait for feedback duration before ending trial when no response */\n      /** if using feedback_duration as interstimulus response, keep this true */\n      feedbackWaitNoResponse: {\n        type: ParameterType.BOOL,\n        default: true,\n      },\n      /** Text for the response button */\n      button_text: {\n        type: ParameterType.STRING,\n        default: \"\",\n      },\n      /** Color of the stimulus square */\n      stimulus_color: {\n        type: ParameterType.STRING,\n        default: \"#0066cc\",\n      },\n      /** Color of correct feedback border */\n      correct_color: {\n        type: ParameterType.STRING,\n        default: \"#00cc00\",\n      },\n      /** Color of incorrect feedback border */\n      incorrect_color: {\n        type: ParameterType.STRING,\n        default: \"#cc0000\",\n      },\n      /** Instructions to display above the grid */\n      instructions: {\n        type: ParameterType.STRING,\n        default: \"Click MATCH when this is a target trial.\",\n      },\n    },\n    data: {\n      /** Row position of the stimulus */\n      stimulus_row: {\n        type: ParameterType.INT,\n      },\n      /** Column position of the stimulus */\n      stimulus_col: {\n        type: ParameterType.INT,\n      },\n      /** Whether this trial was a target */\n      is_target: {\n        type: ParameterType.BOOL,\n      },\n      /** Whether participant responded */\n      response: {\n        type: ParameterType.BOOL,\n      },\n      /** Response time in milliseconds */\n      response_time: {\n        type: ParameterType.INT,\n      },\n      /** Whether the response was correct */\n      correct: {\n        type: ParameterType.BOOL,\n      },\n    },\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\n/**\n * **plugin-spatial-nback-ts**\n *\n * Single trial spatial grid stimulus with response collection\n *\n * @author A. Hunter Farhat\n */\nclass SpatialNbackTsPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let trial_start_time: number;\n    let response_allowed = false;\n    let response_given = false;\n    let stimulus_timeout: number;\n    let isi_timeout: number;\n    let stimulus_hidden = false; // Track if stimulus has been hidden\n\n    // Generate random position if not specified\n    const stimulus_row = trial.stimulus_row ?? Math.floor(Math.random() * trial.rows);\n    const stimulus_col = trial.stimulus_col ?? Math.floor(Math.random() * trial.cols);\n\n    const createDisplay = (): void => {\n      let html = `\n        <div id=\"nback-container\" style=\"\n          position: fixed;\n          top: 50%;\n          left: 50%;\n          transform: translate(-50%, -50%);\n          width: 100vw;\n          height: 100vh;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n          font-family: Arial, sans-serif;\n          box-sizing: border-box;\n          padding: 20px;\n        \">`;\n      \n      // Instructions\n      html += `<div id=\"nback-instructions\" style=\"\n        position: absolute;\n        top: 15vh;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 80%;\n        max-width: 520px;\n        text-align: center;\n        font-size: clamp(14px, 2vmin, 18px);\n        z-index: 10;\n      \">${trial.instructions}</div>`;\n\n      // Calculate grid size to fit screen\n      const grid_size = Math.min(50, 80 / Math.max(trial.rows, trial.cols));\n      const cell_size = `${grid_size / Math.max(trial.rows, trial.cols)}vmin`;\n\n      // Grid - centered and responsive\n      html += `<div id=\"nback-grid\" style=\"\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        border: 2px solid #000;\n        box-sizing: border-box;\n        display: inline-block;\n        z-index: 5;\n      \">`;\n      \n      for (let row = 0; row < trial.rows; row++) {\n        html += '<div style=\"display: flex;\">';\n        for (let col = 0; col < trial.cols; col++) {\n          html += `<div id=\"cell-${row}-${col}\" style=\"\n            width: ${cell_size};\n            height: ${cell_size};\n            border: 1px solid #ccc;\n            background-color: white;\n            box-sizing: border-box;\n            min-width: ${Math.max(40, trial.cell_size * 0.5)}px;\n            min-height: ${Math.max(40, trial.cell_size * 0.5)}px;\n          \"></div>`;\n        }\n        html += '</div>';\n      }\n      html += '</div>';\n\n      // Response button\n      html += `<div id=\"nback-button-container\" style=\"\n        position: absolute;\n        bottom: 15vh;\n        left: 50%;\n        transform: translateX(-50%);\n        z-index: 10;\n      \">`;\n      html += `<button id=\"nback-response-btn\" style=\"\n        font-size: clamp(18px, 3vmin, 26px);\n        padding: clamp(18px, 2.5vmin, 30px) clamp(35px, 5vmin, 60px);\n        background-color: #2196F3;\n        color: white;\n        border: none;\n        border-radius: 8px;\n        cursor: pointer;\n        font-weight: bold;\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n        transition: all 0.2s;\n      \" disabled>${trial.button_text}</button>`;\n      html += '</div>';\n      \n      // Feedback area\n      html += `<div id=\"nback-feedback\" style=\"\n        position: absolute;\n        bottom: 8vh;\n        left: 50%;\n        transform: translateX(-50%);\n        height: 40px;\n        font-size: clamp(14px, 2vmin, 20px);\n        font-weight: bold;\n        text-align: center;\n        z-index: 10;\n        width: 80%;\n      \"></div>`;\n      \n      html += '</div>';\n      \n      display_element.innerHTML = html;\n\n      // Add button hover effects and event listener\n      const button = document.getElementById('nback-response-btn') as HTMLButtonElement;\n      button.addEventListener('mouseenter', () => {\n        if (!button.disabled) {\n          button.style.backgroundColor = '#1976D2';\n          button.style.transform = 'translateY(-2px)';\n        }\n      });\n      button.addEventListener('mouseleave', () => {\n        button.style.backgroundColor = '#2196F3';\n        button.style.transform = 'translateY(0)';\n      });\n      button.addEventListener('click', handleResponse);\n    };\n\n    const startTrial = (): void => {\n      // Show stimulus\n      const cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\n      cell.style.backgroundColor = trial.stimulus_color;\n\n      // Enable response\n      response_allowed = true;\n      trial_start_time = performance.now();\n      stimulus_hidden = false;\n      \n      const responseButton = document.getElementById('nback-response-btn') as HTMLButtonElement;\n      responseButton.disabled = false;\n\n      // Set timeout to hide stimulus\n      stimulus_timeout = window.setTimeout(() => {\n        cell.style.backgroundColor = 'white';\n        stimulus_hidden = true;\n        \n        // Set timeout for ISI\n        isi_timeout = window.setTimeout(() => {\n          if (response_allowed && !response_given) {\n            handleNoResponse();\n          }\n        }, trial.isi_duration);\n      }, trial.stimulus_duration);\n    };\n\n    const handleResponse = (): void => {\n      if (!response_allowed || response_given) return;\n\n      response_allowed = false;\n      response_given = true;\n      const response_time = performance.now() - trial_start_time;\n      const is_correct = trial.is_target;\n\n      // Clear timeouts\n      clearTimeout(stimulus_timeout);\n      clearTimeout(isi_timeout);\n\n      // Show feedback with appropriate timing\n      showFeedback(is_correct, response_time, true);\n    };\n\n    const handleNoResponse = (): void => {\n      if (!response_allowed || response_given) return;\n\n      response_allowed = false;\n      response_given = true;\n      const is_correct = !trial.is_target;\n\n      showFeedback(is_correct, null, false);\n    };\n\n    const showFeedback = (is_correct: boolean, response_time: number | null, made_response: boolean): void => {\n      // If no feedback is shown, handle timing appropriately\n      if (!trial.show_feedback && !trial.show_feedback_border) {\n        if (made_response && !stimulus_hidden) {\n          // Response during stimulus - wait for stimulus + feedback duration, then ISI\n          const elapsed_time = performance.now() - trial_start_time;\n          const remaining_stimulus_time = Math.max(0, trial.stimulus_duration - elapsed_time);\n          const feedback_wait_time = remaining_stimulus_time + trial.feedback_duration;\n          \n          setTimeout(() => {\n            // Hide stimulus after the combined time\n            const cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\n            cell.style.backgroundColor = 'white';\n            \n            // Wait for ISI duration before ending trial\n            setTimeout(() => {\n              endTrial(is_correct, response_time, made_response);\n            }, trial.isi_duration);\n          }, feedback_wait_time);\n        } else {\n          // Response during ISI or no response - end immediately\n          endTrial(is_correct, response_time, made_response);\n        }\n        return;\n      }\n\n      // Disable the button during feedback\n      const button = document.getElementById('nback-response-btn') as HTMLButtonElement;\n      button.disabled = true;\n      button.style.opacity = '0.6';\n\n      // Calculate feedback duration based on when response occurred\n      let feedback_duration: number;\n      \n      if (made_response && !stimulus_hidden) {\n        // Response during stimulus - show feedback for stimulus + feedback duration\n        const elapsed_time = performance.now() - trial_start_time;\n        const remaining_stimulus_time = Math.max(0, trial.stimulus_duration - elapsed_time);\n        feedback_duration = remaining_stimulus_time + trial.feedback_duration;\n      } else if (made_response && stimulus_hidden) {\n        // Response during ISI - show feedback for remaining ISI + feedback duration\n        const elapsed_time = performance.now() - trial_start_time;\n        const isi_start_time = trial.stimulus_duration;\n        const elapsed_isi_time = elapsed_time - isi_start_time;\n        const remaining_isi_time = Math.max(0, trial.isi_duration - elapsed_isi_time);\n        feedback_duration = remaining_isi_time + trial.feedback_duration;\n      } else {\n        // No response - use standard feedback duration if configured\n        if (trial.feedbackWaitNoResponse) {\n          feedback_duration = trial.feedback_duration;\n        } else {\n          endTrial(is_correct, response_time, made_response);\n          return;\n        }\n      }\n\n      // If there is no response and feedback must not be shown for no response\n      if (response_time === null && !trial.showFeedbackNoResponse) {\n        if (trial.feedbackWaitNoResponse) {\n          setTimeout(() => {\n            endTrial(is_correct, response_time, made_response);\n          }, feedback_duration);\n        } else {\n          endTrial(is_correct, response_time, made_response);\n        }\n        return;\n      }\n      \n      // Initialize feedback elements\n      const grid = document.getElementById('nback-grid') as HTMLElement;\n      const feedback_div = document.getElementById('nback-feedback') as HTMLElement;\n\n      // // Hide stimulus if still showing\n      // if (!stimulus_hidden) {\n      //   const cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\n      //   cell.style.backgroundColor = 'white';\n      // }\n\n      // Show border feedback\n      if (trial.show_feedback_border) {\n        grid.style.border = `6px solid ${is_correct ? trial.correct_color : trial.incorrect_color}`;\n      }\n\n      // Show text feedback\n      if (trial.show_feedback) {\n        let feedback_text = is_correct ? 'Correct!' : 'Incorrect!';\n        if (response_time !== null) {\n          feedback_text += ` (${Math.round(response_time)}ms)`;\n        }\n        feedback_div.textContent = feedback_text;\n        feedback_div.style.color = is_correct ? trial.correct_color : trial.incorrect_color;\n      }\n\n      // Handle the timing based on when response occurred\n      if (made_response && !stimulus_hidden) {\n        // Response during stimulus - show feedback, then ISI\n        setTimeout(() => {\n          // Clear feedback\n          if (trial.show_feedback_border) {\n            grid.style.border = '2px solid #000';\n          }\n          if (trial.show_feedback) {\n            feedback_div.textContent = '';\n          }\n          \n          // Wait for ISI duration before ending trial\n          setTimeout(() => {\n            endTrial(is_correct, response_time, made_response);\n          }, trial.isi_duration);\n        }, feedback_duration);\n      } else {\n        // Response during ISI or no response - just wait for feedback duration\n        setTimeout(() => {\n          endTrial(is_correct, response_time, made_response);\n        }, feedback_duration);\n      }\n    };\n\n    const endTrial = (is_correct: boolean, response_time: number | null, made_response: boolean): void => {\n      // Prepare trial data\n      const trial_data = {\n        stimulus_row: stimulus_row,\n        stimulus_col: stimulus_col,\n        is_target: trial.is_target,\n        response: made_response,\n        response_time: response_time,\n        correct: is_correct\n      };\n\n      // Clear display\n      display_element.innerHTML = '';\n\n      // End trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // Initialize the trial\n    createDisplay();\n    startTrial();\n  }\n}\n\nexport default SpatialNbackTsPlugin;"],"names":[],"mappings":";;;;AAEE,IAAW,OAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC6HA,SAAA,EAAA;AAAA;;GAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}